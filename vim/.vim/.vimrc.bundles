" Plug {{{

    call plug#begin('~/.vim/plugged')

    Plug 'junegunn/vim-plug'
    Plug 'scrooloose/nerdcommenter' "多行注释，leader键+cc生成, leader+cu删除注释
    Plug 'scrooloose/nerdtree', { 'on':  ['NERDTreeToggle', 'NERDTreeFind'] }
    Plug 'Xuyuanp/nerdtree-git-plugin', { 'on': ['NERDTreeToggle', 'NERDTreeFind'] }
    Plug 'godlygeek/tabular'
    Plug 'plasticboy/vim-markdown', { 'for': 'markdown' }
    Plug 'mzlogin/vim-markdown-toc', { 'on': ['GenTocGFM', 'GenTocRedcarpet', 'GenTocGitLab', 'UpdateToc', 'RemoveToc'] }
    "Plug 'aperezdc/vim-template'
    Plug 'maralla/completor.vim'
    Plug 'liuchengxu/space-vim-dark'
    "Plug 'tyrannicaltoucan/vim-quantum'
    Plug 'mbbill/undotree', { 'on':  'UndotreeToggle' }
    Plug 'w0rp/ale'
    Plug 'skywind3000/asyncrun.vim'
    Plug 'tpope/vim-surround'
    Plug 'easymotion/vim-easymotion',
    if executable('git')
        Plug 'tpope/vim-fugitive'
    endif
    
    if executable('ctags') || isdirectory(expand("~/.vim/depend/ctags"))
        Plug 'majutsushi/tagbar', { 'on': ['TagbarToggle', 'TagbarOpen'] }
    endif
    
    call plug#end()

" }}}

" Config {{{
    " NerdTree {{{
        if isdirectory(expand("~/.vim/plugged/nerdtree"))
            nmap <leader>nn :NERDTreeToggle<CR>
            nmap <leader>nf :NERDTreeFind<CR>
            let g:NERDShutUp=1
            let s:has_nerdtree = 1
            let g:nerdtree_tabs_open_on_gui_startup=0
            let g:nerdtree_tabs_open_on_console_startup = 0
            let g:nerdtree_tabs_smart_startup_focus = 2
            let g:nerdtree_tabs_focus_on_files = 1
            let g:NERDTreeWinSize=30
            let g:NERDTreeShowBookmarks=1
            let g:nerdtree_tabs_smart_startup_focus = 0
            let g:NERDTreeIgnore=['\.py[cd]$', '\~$', '\.swo$', '\.swp$', '^\.git$', '^\.hg$', '^\.svn$', '\.bzr$']
            let g:NERDTreeChDirMode=0
            let g:NERDTreeQuitOnOpen=1
            let g:NERDTreeMouseMode=2
            let g:NERDTreeShowHidden=1
            let g:NERDTreeKeepTreeInNewTab=1
            let g:nerdtree_tabs_focus_on_files = 1
            let g:nerdtree_tabs_open_on_gui_startup = 0
            let g:NERDTreeWinPos=0
            let g:NERDTreeDirArrowExpandable = '▸'
            let g:NERDTreeDirArrowCollapsible = '▾'
            au bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") &&b:NERDTreeType == "primary") | q | endif
            if isdirectory(expand("~/.vim/plugged/nerdtree-git-plugin"))
                let g:NERDTreeIndicatorMapCustom = {
                    \ "Modified"  : "*",
                    \ "Staged"    : "+",
                    \ "Untracked" : "★",
                    \ "Renamed"   : "→ ",
                    \ "Unmerged"  : "=",
                    \ "Deleted"   : "X",
                    \ "Dirty"     : "●",
                    \ "Clean"     : "√",
                    \ "Ignored"   : "☒",
                    \ "Unknown"   : "?"
                    \ }
            endif
        endif
    " }}}
    
    " ale {{{
        if isdirectory(expand("~/.vim/plugged/ale"))
            let g:ale_completion_enabled   = 1
            let g:ale_lint_on_enter        = 0
            let g:ale_lint_on_text_changed = 'always'
            nmap <F9> :ALEToggle<CR>
            " signs fo
            let g:ale_sign_column_always   = 1
            let g:ale_set_signs            = 1
            let g:ale_set_highlights       = 0
            let g:ale_sign_error           = 'E'
            let g:ale_sign_warning         = 'w'
            " message format
            let g:ale_echo_msg_error_str   = 'E'
            let g:ale_echo_msg_warning_str = 'W'
            let g:ale_echo_msg_format      = '[%linter%] %s [%code%]'

            let g:ale_fix_on_save          = 0
            let g:ale_set_loclist          = 0
            let g:ale_set_quickfix         = 0
            let g:ale_statusline_format    = ['E:%d', 'W:%d', '']
            "highlight clear ALEErrorSign
            "highlight clear ALEWarningSign
            nmap <silent> <leader>[ <Plug>(ale_previous_wrap)
            nmap <silent> <leader>] <Plug>(ale_next_wrap)
            " 特定后缀指定lint方式
            let g:ale_pattern_options_enabled = 1
            let b:ale_warn_about_trailing_whitespace = 0
            let g:ale_fixers ={}
            nmap <leader>gt :ALEGoToDefinition<CR>
        endif
    " }}}

    " vim-template {{{
    "   if isdirectory(expand("~/.vim/plugged/vim-template"))
    "       let g:templates_directory = ['/home/pylego/.vim/templates',]
    "       let g:templates_user_variables = [['EMAIL', 'GetMail'], ['FULLPATH', 'GetFullPath']]
    "   endif

    "    function GetMail()
    "        return 'zhiyeyou@gmail.com'
    "    endfunction

    "    function GetFullPath()
    "        return expand('%:p')
    "    endfunction
    " }}}

    " tabular {{{
        if isdirectory(expand("~/.vim/plugged/tabular"))
            nmap <Leader>a&     :Tabularize /&<CR>
            vmap <Leader>a&     :Tabularize /&<CR>
            nmap <Leader>a=     :Tabularize /^[^=]*\zs=<CR>
            vmap <Leader>a=     :Tabularize /^[^=]*\zs=<CR>
            nmap <Leader>a=>    :Tabularize /=><CR>
            vmap <Leader>a=>    :Tabularize /=><CR>
            nmap <Leader>a:     :Tabularize /:<CR>
            vmap <Leader>a:     :Tabularize /:<CR>
            nmap <Leader>a::    :Tabularize /:\zs<CR>
            vmap <Leader>a::    :Tabularize /:\zs<CR>
            nmap <Leader>a,     :Tabularize /,<CR>
            vmap <Leader>a,     :Tabularize /,<CR>
            nmap <Leader>a,,    :Tabularize /,\zs<CR>
            vmap <Leader>a,,    :Tabularize /,\zs<CR>
            nmap <Leader>a<Bar> :Tabularize /<Bar><CR>
            vmap <Leader>a<Bar> :Tabularize /<Bar><CR>
        endif
    " }}}

    " markdown {{{
        if isdirectory(expand("~/.vim/plugged/vim-markdown"))
            let g:vim_markdown_folding_disabled = 1
            let g:vim_markdown_math = 1
            let g:vim_markdown_frontmatter = 1
            let g:vim_markdown_conceal = 0
        endif

        if isdirectory(expand("~/.vim/plugged/vim-markdown-toc"))
            let g:vmt_auto_update_on_save = 1
            let g:vmt_dont_insert_fence = 0
            let g:vim_markdown_toc_autofit = 1
            autocmd FileType markdown nnoremap <C-m> :GenTocGFM<CR>
        endif
    " }}}

    " completor.vim {{{
        if isdirectory(expand("~/.vim/plugged/completor.vim"))
			if LINUX()
				let g:completor_python_binary = '/usr/bin/python3'
                let g:completor_node_binary = '/usr/local/node/bin/node'
			elseif WINDOWS()
				let g:completor_python_binary = 'D:/Anaconda3/python.exe'   "windows10企业版python3莫名卡顿，换用Anaconda3
                let g:completor_node_binary = 'D:/Node/node.exe'
			endif
        endif
        "Use Tab to select completion
        inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
        inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
        inoremap <expr> <cr> pumvisible() ? "\<C-y>\<cr>" : "\<cr>"

    " }}}

    " tagbar {{{
        if isdirectory(expand("~/.vim/plugged/tagbar"))
            if WINDOWS()
                let g:tagbar_ctags_bin='~/.vim/depend/ctags/ctags.exe'  "默认/usr/bin/ctags
            endif

            let g:tagbar_width=30
            let g:tagbar_sort = 0
            set tags=./tags;/,~/.vimtags
            " Make tags placed in .git/tags file available in all levels of a repository
            let gitroot = substitute(system('git rev-parse --show-toplevel'), '[\n\r]', '', 'g')
            if gitroot != ''
                let &tags = &tags . ',' . gitroot . '/.git/tags'
            endif
            nnoremap <silent><leader>tt :TagbarToggle<CR>
            nnoremap <silent><leader>tj :TagbarOpen j<CR>
            " AutoCloseTag
            " Make it so AutoCloseTag works for xml and xhtml files as well
            au FileType xhtml,xml ru ftplugin/html/autoclosetag.vim
            nnoremap <Leader>ta <Plug>ToggleAutoCloseMappings
        endif
    " }}}

    " UndoTree {{{
        if isdirectory(expand("~/.vim/plugged/undotree"))
            nnoremap <silent><Leader>u :UndotreeToggle<CR>
            " If undotree is opened, it is likely one wants to interact with it.
            let g:undotree_SetFocusWhenToggle=1
        endif
    " }}}

    " asyncrun {{{
        if isdirectory(expand("~/.vim/plugged/asyncrun.vim"))
            nmap <Leader>tr :AsyncRun
            function! RUNIT()
                exec "w"
                cclose
                call asyncrun#quickfix_toggle(8)
                if &filetype == 'c'
                    exec ":AsyncRun g++ % -o %<"
                    exec ":AsyncRun ./%<"
                elseif &filetype == 'cpp'
                    exec ":AsyncRun g++ % -o %<"
                    exec ":AsyncRun ./%<"
                elseif &filetype == 'java'
                    exec ":AsyncRun javac %"
                    exec ":AsyncRun java %<"
                elseif &filetype == 'sh'
                    exec ":AsyncRun bash %"
                elseif &filetype == 'python'
                    if LINUX()
                        exec ":AsyncRun python3 %"
                    else
                        exec ":AsyncRun python %"
                    endif
                elseif &filetype == 'perl'
                    exec ":AsyncRun perl %"
                elseif &filetype == 'go'
                    exec ":AsyncRun go run %"
                endif
            endfunction
            nmap <F5> :call RUNIT()<CR>
            nmap <leader><F5> :call asyncrun#quickfix_toggle(8)<CR>
        endif
    " }}}

    " Theme {{{
        if  filereadable(expand("~/.vim/plugged/space-vim-dark/colors/space-vim-dark.vim"))
            set t_Co=256
            "set background=dark
            "set termguicolors
            colorscheme space-vim-dark
            hi LineNr ctermbg=NONE guibg=NONE
            hi CursorLineNr ctermbg=NONE guibg=NONE
            if !has('gui_running')
                hi Normal ctermbg=NONE guibg=NONE
                hi LineNr ctermfg=DarkGray  "行号颜色修正，终端透明情况下
                hi SignColumn ctermbg=NONE guibg=NONE    
            endif
        endif
        
        set laststatus=2
        "set statusline=%<%1*[B-%n]%*
        "set statusline+=%2*\ %F%=\ %*
        "set statusline+=%3*\ %m%r%y%w\ %*
        "set statusline+=%=%4*\ %{&ff}\ \|\ %{\"\".(&fenc==\"\"?&enc:&fenc).((exists(\"+bomb\")\ &&\ &bomb)?\",B\":\"\").\"\ \|\"}\ %-14.(%l:%c%V%)%*
        "set statusline+=%5*\ %P\ %*
        set statusline=%<%1*[B-%n]%*%2*\ %F%=\ %*%3*\ %m%r%y%w\ %*%4*\ %{&ff}\ \|\ %{\"\".(&fenc==\"\"?&enc:&fenc).((exists(\"+bomb\")\ &&\ &bomb)?\",B\":\"\").\"\ \|\"}\ %-14.(%l:%c%V%)%*%5*\ %P\ %*
        hi User1 cterm=bold ctermfg=249 ctermbg=240 gui=bold guifg=#b2b2b2 guibg=#585858
        hi User2 cterm=bold ctermfg=169 ctermbg=238 gui=bold guifg=#d75faf guibg=#444444
        hi User3 cterm=None ctermfg=250 ctermbg=238 gui=None guifg=#bcbcbc guibg=#444444
        hi User4 cterm=None ctermfg=250 ctermbg=238 gui=None guifg=#bcbcbc guibg=#444444
        hi User5 cterm=None ctermfg=249 ctermbg=240 gui=None guifg=#b2b2b2 guibg=#585858
    " }}}

" PlugName {{{
"        if isdirectory(expand("~/.vim/plugged/PlugDir"))
"        endif
" }}}

" }}}
