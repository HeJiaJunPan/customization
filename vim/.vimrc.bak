" Startup {{{
filetype indent plugin on


" vim 文件折叠方式为 marker
" 文件折叠显示切换快捷键为za
augroup ft_vim
    au!

    autocmd FileType vim setlocal foldmethod=marker

    " 打开文件总是定位到上次编辑的位置
    autocmd BufReadPost *
      \ if line("'\"") > 1 && line("'\"") <= line("$") |
      \   exe "normal! g`\"" |
      \ endif

    augroup END
augroup END
" }}}


" General {{{
"set pythonthreedll=python36.dll
"禁止生成临时文件
set nobackup
set noswapfile

"历史记录数
set history=1024

"1不显示书签栏
set showtabline=1

"设置当文件在外部被修改，自动更新该文件
set autoread

set autochdir
"set whichwrap=b,s,<,>,[,]
set nobomb

"使回格键（backspace）正常处理indent, eol, start等
set backspace=indent,eol,start whichwrap+=<,>,[,]

" Vim 的默认寄存器和系统剪贴板共享
set clipboard+=unnamed

" 设置 alt 键不映射到菜单栏
set winaltkeys=no


" }}}


" Lang & Encoding {{{
"查询当前编辑的文件的字符编码方式并打开
set fileencodings=utf-8,gbk2312,gbk,gb18030,cp936

"vim内部使用的字符编码方式
set encoding=utf-8
set langmenu=zh_CN.UTF-8
let $LANG = 'en_US.UTF-8'
"vim提示信息乱码的解决
"language messages zh_CN.UTF-8
"工作的终端或者Windows的Console窗口的字符编码方式
"set termencoding=utf-8

"vim的菜单乱码解决
source $VIMRUNTIME/delmenu.vim
source $VIMRUNTIME/menu.vim
" }}}


" GUI {{{
colorscheme molokai
"colorscheme github
"let g:molokai_original = 1

set cursorline
set hlsearch
set number
" 窗口大小
set lines=32 columns=120
" 分割出来的窗口位于当前窗口下边/右边
set splitbelow
set splitright
"不显示工具/菜单栏
set guioptions-=T " 隐藏工具栏
set guioptions-=m " 隐藏菜单栏
"set guioptions-=L
"set guioptions-=r
"set guioptions-=b
" 使用内置 tab 样式而不是 gui
set guioptions-=e
set nolist

" set listchars=tab:▶\ ,eol:¬,trail:·,extends:>,precedes:<
set guifont=Consolas:h12:cANSI
" }}}


" Keymap {{{
"配置前缀键
let mapleader=","
nnoremap \ ,
nnoremap J j
nnoremap K k
inoremap jk <ESC>
nnoremap <Up> <Nop>
nnoremap <Down> <Nop>
nnoremap <Left> <Nop>
nnoremap <Right> <Nop>
nnoremap // :nohlsearch<CR>
inoremap {} {<CR>}<ESC>O
"重载配置文件
nnoremap <leader>sv :source $MYVIMRC<cr>
"打开配置文件
nnoremap <leader>ev :vs $MYVIMRC<cr>

nnoremap <leader>tn :tabnew<cr>
nnoremap <leader>tc :tabclose<cr>
nnoremap <leader>th :tabp<cr>
nnoremap <leader>tl :tabn<cr>

" 当前文件父目录
"cnoremap <expr> %% getcmdtype( ) == ':' ? expand('%:h').'/' : '%%'

" 移动分割窗口
nnoremap <C-j> <C-W>j
nnoremap <C-k> <C-W>k
nnoremap <C-h> <C-W>h
nnoremap <C-l> <C-W>l

" 正常模式下 alt+j,k,h,l 调整分割窗口大小
"nnoremap <M-j> :resize +5<cr>
"nnoremap <M-k> :resize -5<cr>
"nnoremap <M-h> :vertical resize -5<cr>
"nnoremap <M-l> :vertical resize +5<cr>

" 打开当前目录 windows
nnoremap <silent> <leader>ex :!start explorer %:p:h<CR>

" 打开当前目录CMD
nnoremap <silent> <leader>cmd :!start cmd /k cd %:p:h<cr>
" 打印当前时间
nnoremap <F3> a<C-R>=strftime("%Y-%m-%d %a %I:%M %p")<CR><Esc>

" 复制当前文件/路径到剪贴板
nnoremap ,fn :let @*=substitute(expand("%"), "/", "\\", "g")<CR>
nnoremap ,fp :let @*=substitute(expand("%:p"), "/", "\\", "g")<CR>

" }}}


" Plugin {{{
set nocompatible
filetype off  
set rtp+=$VIM/bundle/Vundle.vim  
"vundle 管理的插件列表必须位于 vundle#begin() 和 vundle#end() 之间  
call vundle#begin('$VIM/bundle')  
Plugin 'VundleVim/Vundle.vim'  
Plugin 'Lokaltog/vim-powerline' "status 美化  
Plugin 'scrooloose/nerdcommenter' "多行注释，leader键+cc生成, leader+cu删除注释
Plugin 'kien/ctrlp.vim' "搜索历史打开文件，在命令行模式下按ctrl+p触发  
Plugin 'vim-scripts/grep.vim' "在命令行模式使用grep命令，:Grep

"-------------------------------------NERDTree Start--------------------------------------------
Plugin 'scrooloose/nerdtree' "文件浏览
"NERDTree窗口切换快捷键
nnoremap <leader>l :NERDTreeToggle<CR>
" 显示行号
let NERDTreeShowLineNumbers=1
let NERDTreeAutoCenter=1
" 是否显示隐藏文件
let NERDTreeShowHidden=1
" 设置宽度
let NERDTreeWinSize=24
" 在终端启动vim时，共享NERDTree
let g:nerdtree_tabs_open_on_console_startup=1
" 忽略一下文件的显示
let NERDTreeIgnore=['\.idea', '\.vscode', 'node_modules','\.pyc','\~$','\.swp','\.swp']
" 显示书签列表
"let NERDTreeShowBookmarks=1
"-------------------------------------NERDTree END----------------------------------------------

"-----------------------------------Markdown Start----------------------------------------------
Plugin 'godlygeek/tabular'
Plugin 'plasticboy/vim-markdown'
let g:vim_markdown_folding_disabled = 1
"-----------------------------------Markdown End------------------------------------------------

"Plugin 'nathanaelkane/vim-indent-guides.git' "缩进对齐显示
"Plugin 'octol/vim-cpp-enhanced-highlight' "对c++语法高亮增强  
"Plugin 'kshenoy/vim-signature' "书签可视化的插件  
"Plugin 'vim-scripts/BOOKMARKS--Mark-and-Highlight-Full-Lines' "书签行高亮  
"Plugin 'majutsushi/tagbar' "taglist的增强版，查看标签，依赖于ctags
"Plugin 'Lokaltog/vim-easymotion' "快速跳转，按两下leader键和f组合  
"Plugin 'vim-scripts/ShowTrailingWhitespace.git' "高亮显示行尾的多余空白字符  
"Plugin 'vim-scripts/indentpython.vim.git'  
"Plugin 'vim-scripts/Solarized.git' "主题方案
"Plugin 'Valloric/YouCompleteMe' "自动补全
"Plugin 'vim-scripts/indexer.tar.gz' "自动生成标签  
"Plugin 'vim-scripts/DfrankUtil' "indexer 依赖  
"Plugin 'vim-scripts/vimprj' "indexer 依赖  
"Plugin 'davidhalter/jedi-vim' "python 补全，不依赖于tags,但比较慢，可以使用indexer替换，但不能跳转项目外  
"Plugin 'vim-scripts/Markdown'  
"Plugin 'tpope/vim-surround'  
"Plugin 'ekalinin/Dockerfile.vim'
"Plugin 'w0rp/ale'
"Plugin 'python-mode/python-mode'
"let g:pymode_python = 'python3'
"Plugin 'davidhalter/jedi-vim'
"let g:jedi#completions_command = "<C-N>"
"Plugin 'vim-syntastic/syntastic'
" 插件列表结束
call vundle#end()  
filetype on  
" }}}


" 代码风格 {{{
"通用设置
set ruler
set showmode
syntax on

set autoindent
set shiftwidth=4
set tabstop=4
set softtabstop=4
set expandtab

"TAB缩进
"autocmd FileType c,cpp,python set shiftwidth=4
"autocmd FileType c,cpp,python set tabstop=4

"autocmd FileType javascript,html,xml,css,java set shiftwidth=2
"autocmd FileType javascript,html,xml,css,java set tabstop=2

"python TAB to Blank
"autocmd FileType python,javascript set expandtab
"autocmd FileType python,javascript set softtabstop=4

"自动缩进
"autocmd FileType c,cpp set cindent
"autocmd FileType python set autoindent
"autocmd FileType javascript,html,xml,css,java set autoindent

"代码运行
autocmd FileType java nnoremap <F5> :!start cmd /k cd %:p:h && javac -encoding UTF-8 % && java %:r && pause && exit<CR>
autocmd FileType python nnoremap <F5> :!start cmd /k cd %:p:h && python % && pause && exit<CR>

" }}}
    " PyMode {{{
        if isdirectory(expand("~/.vim/plugged/python-mode"))
            " python version
            if has('python3')
                let g:pymode_python = 'python3'
            else
                let g:pymode_python = 'python'
            endif
            " disable pymode_rope and pymode_folding for slow problem
            let g:pymode_rope = 0
            let g:pymode_folding = 0
            let g:pymode_trim_whitespaces = 1
            let g:pymode_options = 0
            " doc for python
            let g:pymode_doc = 0
            " motion
            let g:pymode_motion = 1
            " run python
            let g:pymode_run_bind = '<leader>R'
            " breakpoint
            let g:pymode_breakpoint = 1
            let g:pymode_breakpoint_bind = '<LocalLeader>p'
            let g:pymode_breakpoint_cmd = 'import pdb;pdb.set_trace()'
            " pymode check disable
            if count(g:spf13_bundle_groups, 'syntax')
                let g:pymode_lint = 0
            else
                let g:pymode_lint = 1
                nmap <F9> :PymodeLint<CR>
                let g:pymode_lint_signs = 1
                " no check when white
                let g:pymode_lint_on_write = 0
                " check when save
                let g:pymode_lint_unmodified = 0
                " not check of fly
                let g:pymode_lint_on_fly = 0
                " show message of error line
                let g:pymode_lint_message = 1
                " checkers
                let g:pymode_lint_checkers = ['pyflakes','pep8']
                "let g:pymode_lint_checkers = ['pep8']
                let g:pymode_lint_ignore = "E128,E2,E3,E501"
                " not Auto open cwindow (quickfix) if any errors have been found
                let g:pymode_lint_cwindow = 0
            endif
            if isdirectory(expand("~/.vim/plugged/python-syntax"))
                let g:pymode_syntax = 0
                let g:pymode_syntax_all = 0
            else
                let g:pymode_syntax = 1
                let g:pymode_syntax_all = 1
            endif
        endif
    " }}}
    
" 延时启动函数 {{{
    " 200
    function! Defer_ale(timer) abort
      call plug#load('ale')
    endfunction

    " 250
    "function! Defer_airline(timer) abort
      "call plug#load('vim-airline')
      "call plug#load('vim-airline-themes')
      "redraws!
    "endfunction

    " 300
    "function! Defer_gitgutter(timer) abort
      "call plug#load('vim-gitgutter')
      "silent! GitGutterEnable
    "endfunction

    " 400
    "function! Defer_programming(timer) abort
      "call plug#load('rainbow')
      "call plug#load('vim-rooter')
      "call plug#load('vim-polyglot')
    "endfunction

    " 500
    "function! Defer_defaults(timer) abort
      "if has('patch-8.0.1206') || has('nvim-0.2.3')
        "call plug#load('traces.vim')
      "endif
      "call plug#load('vim_current_word')
      "call plug#load('vim-signature')
      "call plug#load('vim-rsi')
    "endfunction

    " 600
    function! Defer_motion(timer) abort
      "call plug#load('vim-sneak')
      call plug#load('vim-easymotion')
      "call plug#load('incsearch-easymotion.vim')
    endfunction

    " 700
    "function! Defer_fzf(timer) abort
      "call plug#load('fzf')
      "call plug#load('fzf.vim')
    "endfunction

    " 800
    function! Defer_fugitive(timer) abort
      call plug#load('vim-fugitive')
    endfunction

    " 1000
    "function! Defer_ycm(timer) abort
      "call plug#load('YouCompleteMe')
    "endfunction

    "function! Defer_markdown(timer) abort
      "call plug#load('vim-markdown')
    "endfunction

    "function! Defer_rust(timer) abort
      "call plug#load('rust.vim')
    "endfunction

    "function! Defer_go(timer) abort
       "call plug#load('vim-go')
    "endfunction

    "function! Defer_python(timer) abort
      "call plug#load('python-mode')
      "call plug#load('SimpylFold')
    "endfunction
" }}}


    Plug 'vim-airline/vim-airline'
    Plug 'vim-airline/vim-airline-themes'

    " vim-airline {{{
        if isdirectory(expand("~/.vim/plugged/vim-airline-themes"))
            let g:airline_theme="bubblegum"
            let g:airline_powerline_fonts = 0
            let g:airline_symbols_ascii = 1
            let g:airline_exclude_preview = 0
            let g:airline_highlighting_cache = 1
            let g:airline#extensions#whitespace#enabled = 0
            " tab序号
            let g:airline#extensions#tabline#tab_nr_type = 1
            let g:airline#extensions#tabline#enabled = 0
            " disable buffers on topright
            "let g:airline#extensions#tabline#tabs_label = ''
            "let g:airline#extensions#tabline#show_splits = 0
            "let g:airline#extensions#tabline#show_close_button = 0
            "let g:airline#extensions#tabline#buffer_nr_show = 0
            "let g:airline#extensions#bufferline#enabled = 1
            " shw full_path of the file,and the time
            let g:airline_section_c = "\ %F\ \ %{strftime(\"%Y/%m/%d\ %H:%M\")}"
	        if !exists('g:airline_symbols')
                let g:airline_symbols = {}
            endif
            let g:airline_symbols.crypt = '🔒'
            let g:airline_symbols.linenr = '☰'
            let g:airline_symbols.maxlinenr = ''
            let g:airline_symbols.branch = '⎇'
            let g:airline_symbols.paste = 'ρ'
            let g:airline_symbols.notexists = '∄'
            let g:airline_symbols.whitespace = 'Ξ'
            "let g:airline_left_sep = '▶'
            let g:airline_left_alt_sep = '❯'
            "let g:airline_right_sep = '◀'
            let g:airline_right_alt_sep = '❮'
        elseif has('statusline')
            if isdirectory(expand("~/.vim/plugged/vim-fugitive"))
                set statusline=\ %{fugitive#statusline()}
            else
                set statusline=%<
            endif
            set statusline+=\ %F\ \ %{strftime(\"%Y/%m/%d\ %H:%M\")}
            if isdirectory(expand("~/.vim/plugged/ale"))
                set statusline+=\ %{ALEGetStatusLine()}
            endif
            "set statusline+=\ [%{&ff}/%Y]
	        set statusline+=%=%25([%{&ff}/%Y]\ %p%%\ \ %l/%L:\ %c%)\ %<
		endif
    " }}}